generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoConta {
  SEBO
  USUARIO
}

enum StatusConta {
  ATIVA
  EXCLUIDA
}

model Conta {
  id                  Int         @id @default(autoincrement())
  email               String
  senha               String
  tipo                TipoConta
  status              StatusConta @default(ATIVA)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  resetToken          String?
  resetTokenExpiresAt DateTime?

  sebo    Sebo?
  usuario Usuario?
}

model Sebo {
  id                   Int     @id @default(autoincrement())
  nome                 String
  cpfCnpj              String  @db.VarChar(16)
  concordaVender       Boolean
  telefone             String? @db.VarChar(11)
  biografia            String?
  horarioFuncionamento String?
  estanteVirtual       String?
  instagram            String?
  curadores            String?
  historia             String?
  fotoPerfil           String?
  mercadoLivre         String?
  enjoei               String?
  amazon               String?

  contaId Int   @unique
  conta   Conta @relation(fields: [contaId], references: [id])

  endereco EnderecoSebo?
  fotos    FotoSebo[]
  produtos Produto[]
}

model EnderecoSebo {
  id          Int     @id @default(autoincrement())
  cep         String  @db.Char(8)
  estado      String  @db.Char(2)
  cidade      String
  bairro      String
  rua         String
  numero      String
  complemento String?
  ehPublico   Boolean

  seboId Int  @unique
  sebo   Sebo @relation(fields: [seboId], references: [id], onDelete: Cascade)
}

model FotoSebo {
  url String

  seboId Int
  sebo   Sebo @relation(fields: [seboId], references: [id], onDelete: Cascade)

  @@id([seboId, url])
}

model Usuario {
  id         Int     @id @default(autoincrement())
  nome       String
  cpf        String  @db.Char(11)
  telefone   String  @db.Char(11)
  biografia  String?
  twitter    String?
  instagram  String?
  skoob      String?
  goodreads  String?
  fotoPerfil String?

  contaId Int   @unique
  conta   Conta @relation(fields: [contaId], references: [id])
}

enum StatusProduto {
  ATIVO
  EXCLUIDO
}

enum CategoriaProduto {
  LIVRO
  REVISTA
  QUADRINHOS
  DISCO
  CD
  DVD
  OUTRO
}

enum EstadoConservacaoProduto {
  NOVO
  SEMINOVO
  USADO
  DESCONHECIDO
}

model Produto {
  id                Int                      @id @default(autoincrement())
  nome              String
  preco             Float
  status            StatusProduto            @default(ATIVO)
  categoria         CategoriaProduto
  generos           String[]
  qtdEstoque        Int
  estadoConservacao EstadoConservacaoProduto
  anoEdicao         Int?
  anoLancamento     Int?
  autores           String?
  descricao         String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt

  fotos  FotoProduto[]
  seboId Int
  sebo   Sebo          @relation(fields: [seboId], references: [id])
}

model FotoProduto {
  id  Int    @id @default(autoincrement())
  url String

  produtoId Int
  produto   Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
}
